# - Try to find CERBER Engine
# Once done, this will define
#
#  CERBER_ENGINE_FOUND - system has CERBER Engine
#  CERBER_ENGINE_INCLUDE_DIR - the CERBER Engine include directory
#  CERBER_ENGINE_LIBRARIES - link this to use CERBER Engine

find_path(CERBER_ENGINE_INCLUDE_DIR
	NAMES Engine.h
	HINTS
	NO_DEFAULT_PATH
	NO_CMAKE_ENVIRONMENT_PATH
	NO_CMAKE_SYSTEM_PATH
	NO_SYSTEM_ENVIRONMENT_PATH
	NO_CMAKE_PATH
	PATH_SUFFIXES include
	PATHS ${CERBER_GAME_ENGINE_DIR}/Engine
)

find_library(CERBER_ENGINE_LIBRARY
	NAMES Engine
	HINTS
	NO_DEFAULT_PATH
	NO_CMAKE_ENVIRONMENT_PATH
	NO_CMAKE_SYSTEM_PATH
	NO_SYSTEM_ENVIRONMENT_PATH
	NO_CMAKE_PATH
	PATH_SUFFIXES lib
	PATHS ${CERBER_GAME_ENGINE_DIR}
)


# First search for d-suffixed libs
find_library(CERBER_ENGINE_LIBRARY_DEBUG 
	NAMES Engine_d
	HINTS
	NO_DEFAULT_PATH
	NO_CMAKE_ENVIRONMENT_PATH
	NO_CMAKE_SYSTEM_PATH
	NO_SYSTEM_ENVIRONMENT_PATH
	NO_CMAKE_PATH
	PATH_SUFFIXES lib
	PATHS ${CERBER_GAME_ENGINE_DIR}
)

if(NOT CERBER_ENGINE_LIBRARY_DEBUG)
	# Then search for non suffixed libs if necessary, but only in debug dirs
	find_library(CERBER_ENGINE_LIBRARY_DEBUG 
		NAMES Engine
		HINTS
		NO_DEFAULT_PATH
		NO_CMAKE_ENVIRONMENT_PATH
		NO_CMAKE_SYSTEM_PATH
		NO_SYSTEM_ENVIRONMENT_PATH
		NO_CMAKE_PATH
		PATH_SUFFIXES lib
		PATHS ${CERBER_GAME_ENGINE_DIR}
	)
endif()

if(CERBER_ENGINE_LIBRARY)
	if(CERBER_ENGINE_LIBRARY_DEBUG)
		set(CERBER_ENGINE_LIBRARIES optimized "${CERBER_ENGINE_LIBRARY}" debug "${CERBER_ENGINE_LIBRARY_DEBUG}")
	else()
		set(CERBER_ENGINE_LIBRARIES "${CERBER_ENGINE_LIBRARY}")		# Could add "general" keyword, but it is optional
	endif()
endif()

# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(CERBER_ENGINE DEFAULT_MSG CERBER_ENGINE_LIBRARIES CERBER_ENGINE_INCLUDE_DIR)